# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту,
# орбита которой имеет самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits),
# которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета.
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины
# полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел -
# полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса.
# При решении задачи используйте списочные выражения.
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса,
# а затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая планета ровноодна.
# find_farthest_orbit(list_of_orbits)


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
list_Ellipse = list(filter(lambda x: x[0] != x[1], orbits))
print('Отбор только орбит эллипса - > ', *list_Ellipse)
list_S = list(map(lambda x: 3.14*x[0]*x[1], list_Ellipse))
print(list_S)
data = list(enumerate(list_S))
print('Перечень орбит с площадями -> ', data)
data_1 = list(map(lambda x: x[0]+1, data))
print(data_1)
list_Smax = list(max(data, key=lambda x: x[1]))
print(list_Smax)

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# list1 = [i for i in orbits if i[0] != i[1] ]
# list2 = (list(map(lambda x: 3.14 * x[0] * x[1], list1)))
# print(list1[list2.index(max(list2))])
